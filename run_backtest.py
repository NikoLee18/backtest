import pandas as pd
from para_backtest import ParaPosition
import multiprocessing as mp
import jqdatasdk as jq
import os
import datetime
from parallel_toolkit import task_distributor


def run_one(run_dt: list, save_path: str, db_host='LocalHost', db_port=27017):

    pos = {}
    re = {}
    num = 0

    for d in run_dt:
        num += 1
        if num % 2 == 0:
            pos[d] = ParaPosition(d, host=db_host, port=db_port)

            pos[d].target_value(['000001.XSHE'], {'000001.XSHE': 1000})
            re[d] = pos[d].get_account_info()
            pos[d].disconnect()
        else:
            pos[d] = ParaPosition(d, host=db_host, port=db_port)

            pos[d].target_value(['002603.XSHE', '600000.XSHG'], {'002603.XSHE': 1000, '600000.XSHG':2000})
            re[d] = pos[d].get_account_info()
            pos[d].disconnect()

    output_results(re, save_path)



def output_results(res, save_path: str):
    """
    This function is designed to be called at the end of a back-testing process. Holding information should be loaded
    in a list [res] and input.
    :param res: back-test result that consists of pd.DataFrame generated by ParaPosition object
    :param save_path:
    :return:
    """
    if not isinstance(res, (list, dict)):
        raise Exception('Please check type of input param [res]. It should be either list or dict')

    df = pd.concat(res.values(), axis=0)
    # rearrange columns to ensure quicker understanding
    tmp_col = df.columns.tolist(); tmp_col.remove('pos'); tmp_col.append('pos')
    df = df.loc[:, tmp_col]
    df.to_excel(save_path)


def multi_core_backtest(strategy, save_path, start_date: str, end_date: str,
                        db_host='LocalHost', db_port=27017, NUM_PROCESS=4):
    """

    :param strategy:
    :param save_path:
    :param start_date:
    :param end_date:
    :param db_host:
    :param db_port:
    :param NUM_PROCESS:
    :return:
    """
    assert type(start_date) is str and type(end_date) is str

    tradedays = jq.get_trade_days(start_date, end_date)
    tradedays = [i.strftime("%Y-%m-%d") for i in tradedays]

    new_td = []
    for i in range(0, len(tradedays), 2):
        new_td.append(tradedays[i])
    tradedays = task_distributor(NUM_PROCESS, new_td)
    processes = []
    for d in tradedays:
        print(d[0]+"开始进程")
        p = mp.Process(target=strategy, args=(d, save_path+'/holding/'+d[0]+'.xlsx', db_host, db_port))
        p.start()
        processes.append(p)
    for p in processes:
        p.join()

    print("进程全部结束")


def backtest_wrapper(strategy, start_date: str, end_date: str, username: str, password: str,
                     db_host='LocalHost', db_port=27017, NUM_PROCESS=4):
    jq.auth(username=username, password=password)
    path = "results/"
    try:
        os.mkdir(path+'testing')
    except FileExistsError:
        path = path + datetime.datetime.now().strftime("%Y-%m-%dT%H-%M-%S")
        os.mkdir(path)
    # mkdir for holding info
    os.mkdir(path+'/holding')
    print("auth finished\n")
    multi_core_backtest(run_one, path, start_date=start_date, end_date=end_date, db_host=db_host,
                        db_port=db_port, NUM_PROCESS=NUM_PROCESS)
    print(2)
    jq.logout()